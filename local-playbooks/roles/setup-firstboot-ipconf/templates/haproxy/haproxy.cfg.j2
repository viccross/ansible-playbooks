#jinja2:block_start_string:'[%', block_end_string:'%]', variable_start_string:'[[', variable_end_string:']]'
{# ------------------------------------ CRITICAL -------------------------------------- #}
{# This file must be synchronised between configure-haproxy and setup-firstboot-ipconf! #}
{# ------------------------------------ CRITICAL -------------------------------------- #}
{% set bootstrap  = cluster_nodes['bootstrap'] %}
{% set masters    = cluster_nodes['masters'] %}
{% set workers    = cluster_nodes['workers'] %}

global
    log         127.0.0.1 local2
    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon
    stats socket /var/lib/haproxy/stats
    ssl-default-bind-ciphers PROFILE=SYSTEM
    ssl-default-server-ciphers PROFILE=SYSTEM

defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option                  http-server-close
    option                  forwardfor except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          30m
    timeout server          30m
    timeout http-keep-alive 10s
    timeout check           10s
    timeout tunnel          7500s
    maxconn                 3000

frontend ocp4-kubernetes-api-server
   mode tcp
   option tcplog
   bind api.{{ cluster_domain_name }}:6443
   bind api-int.{{ cluster_domain_name }}:6443
   default_backend ocp4-kubernetes-api-server

frontend ocp4-machine-config-server
   mode tcp
   option tcplog
   bind api.{{ cluster_domain_name }}:22623
   bind api-int.{{ cluster_domain_name }}:22623
   default_backend ocp4-machine-config-server

frontend ocp4-router-http
   mode tcp
   option tcplog
   bind apps.{{ cluster_domain_name }}:80
   tcp-request inspect-delay 5s
   acl elanweb hdr(host) -i {{ guest_install_hostname }}.{{ cluster_domain_name }}
   default_backend ocp4-router-http

frontend ocp4-router-https
   mode tcp
   option tcplog
   bind apps.{{ cluster_domain_name }}:443
   tcp-request inspect-delay 5s
   tcp-request content accept if { req_ssl_hello_type 1 }
   acl elanweb req_ssl_sni -i {{ guest_install_hostname }}.{{ cluster_domain_name }}
   default_backend ocp4-router-https

backend ocp4-kubernetes-api-server
   mode tcp
   option httpchk GET /readyz HTTP/1.0
   option log-health-checks
   balance roundrobin
   server boostrap-0 bootstrap-0.{{ cluster_domain_name }}:6443 weight 1 verify none check check-ssl inter 1s fall 2 rise 3
{% for item in masters.keys() %}
   server {{ item }} {{ item }}.{{ cluster_domain_name }}:6443 weight 1 verify none check check-ssl inter 1s fall 2 rise 3
{% endfor %}

backend ocp4-machine-config-server
   mode tcp
   balance roundrobin
   server bootstrap-0 bootstrap-0.{{ cluster_domain_name }}:22623 weight 1 check backup non-stick
{% for item in masters.keys() %}
   server {{ item }} {{ item }}.{{ cluster_domain_name }}:22623 weight 100 check
{% endfor %}

backend ocp4-router-http
   mode tcp
{% if workers is defined %}
   {% for item in workers.keys() %}
      server {{ item }} {{ item }}.{{ cluster_domain_name }}:80 check
   {% endfor %}
   {% if bootworker is defined %}
    {% for item in bootworker.keys() %}
      server {{ item }} {{ item }}.{{ cluster_domain_name }}:80 check
    {% endfor %}
   {% endif %}
{% else %}
    {% for item in masters.keys() %}
      server {{ item }} {{ item }}.{{ cluster_domain_name }}:80 check
   {% endfor %}
{% endif %}

backend ocp4-router-https
   mode tcp
{% if workers is defined %}
   {% for item in workers.keys() %}
      server {{ item }} {{ item }}.{{ cluster_domain_name }}:443 check
   {% endfor %}
   {% if bootworker is defined %}
    {% for item in bootworker.keys() %}
      server {{ item }} {{ item }}.{{ cluster_domain_name }}:443 check
    {% endfor %}
   {% endif %}
{% else %}
    {% for item in masters.keys() %}
      server {{ item }} {{ item }}.{{ cluster_domain_name }}:443 check
   {% endfor %}
{% endif %}

backend elan-http
   mode http
      server bastion bastion.{{ cluster_domain_name }}:8080 check

backend elan-https
   mode tcp
      server bastion bastion.{{ cluster_domain_name }}:8443 check

frontend stats
  bind *:8404 ssl crt /etc/haproxy/haproxy-combined.pem
  stats enable
  stats uri /stats
  stats refresh 10s
  stats admin if LOCALHOST
