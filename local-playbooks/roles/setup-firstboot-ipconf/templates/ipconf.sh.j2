#!/bin/bash
# ipconf.sh -- IP configuration in FastVM
# Checks for a configuration file on the CMS disk and configures appropriately

FP={{ znetboot_cfg_path }}
IFN=enc{{ bastion_vsw_dev }}
MYID=`vmcp q userid | awk '{print $1;}'`

function changeIP {
  FN=$1
  echo "${FN} found, checking"
  source <(grep ^IPADDR ${FN})
  echo IP Address is ${IPADDR}
  source <(grep ^NETMASK ${FN})
  echo -n Net mask is ${NETMASK}
  PFX=`ipcalc -p ${IPADDR} ${NETMASK} | sed -n 's/^PREFIX=\(.*\)/\1/p'`
  echo , prefix is ${PFX}

  # check if the address is the same as existing
  # **** This check may be removed if we decide change is mandatory
  FILEIP="${IPADDR}/$PFX"
  SYSIP=$(ip -br addr show dev ${IFN} | awk '{print $3}')
  if [ "${FILEIP}" = "${SYSIP}" ]; then
    echo "IP address is already the same, exiting"
    exit 0;
  fi

  # go ahead with the address change
  echo "Address change is required"
  # pull the rest of the variables
  source <(grep ^GATEWAY ${FN})
  echo Gateway is ${GATEWAY}
  source <(grep ^DNS ${FN})
  if [ -v DNS1 ]; then
    DNS="${DNS1}"
    if [ -v DNS2 ]; then
      DNS="${DNS}; ${DNS2}"
    fi
    if [ -v DNS3 ]; then
      DNS="${DNS}; ${DNS3}"
    fi
    echo DNS servers are: ${DNS}
  fi

  # all the details retrieved, let's use nmcli to do the address work
  # first, obtain the UUID of the interface
  source <(grep ^UUID /etc/sysconfig/network-scripts/ifcfg-${IFN})
  if [ ! -v UUID ]; then
    echo "UUID of interface not known, exiting!"
    exit 1;
  fi
  # next, update the interface
  nmcli con mod ${UUID} ipv4.method manual ipv4.addresses "${IPADDR}/${PFX}"
  nmcli con mod ${UUID} ipv4.gateway "${GATEWAY}"
  nmcli con up ${UUID}

  # **** Commenting out the DDNS method right now :|
  # next, do the dynamic DNS update to fix BIND
#  nsupdate -l -v <<EOF
#zone {{ cluster_domain_name }}
#update delete bastion.{{ cluster_domain_name }}. A
#update add bastion.{{ cluster_domain_name }}. 900 A ${IPADDR}
#update delete api.{{ cluster_domain_name }}. A
#update add api.{{ cluster_domain_name }}. 900 A ${IPADDR}
#update delete apps.{{ cluster_domain_name }}. A
#update add apps.{{ cluster_domain_name }}. 900 A ${IPADDR}
#update delete *.apps.{{ cluster_domain_name }}. A
#update add *.apps.{{ cluster_domain_name }}. 900 A ${IPADDR}
#send
#EOF

  # stop named
  systemctl stop named-chroot.service
  # Run Ansible playbook to update the BIND configuration
  pushd /opt/ansible && ansible-playbook -i inventory -e cluster_base_domain=${DOMAIN} update-dns.yml


  # update the file in the web server directory
  cat <<EOF > {{ webroot }}/etc.hosts
${IPADDR} bastion.{{ cluster_domain_name }} api.{{ cluster_domain_name }}
${IPADDR} console-openshift-console.apps.{{ cluster_domain_name }} oauth-openshift.apps.{{ cluster_domain_name }}
## The following are used for direct access to the OCP monitoring components,
##  add them as well if you want this direct access
${IPADDR} grafana-openshift-monitoring.apps.{{ cluster_domain_name }}
${IPADDR} prometheus-k8s-openshift-monitoring.apps.{{ cluster_domain_name }}
EOF

  # Restart some services due to address change

  # restart HA-Proxy
  systemctl restart haproxy.service
  echo "HA-Proxy restarted"
  # upstream DNS is harder, have to change the bind config...
  if [ -v DNS ]; then
    sed "s/XXX.XXX.XXX.XXX/${DNS}/g" </etc/named.conf.source >/etc/named.conf
    systemctl restart named-chroot
    echo "BIND name server restarted"
  fi
  # Start up the DASD configuration script because we're at a new site
  systemctl start ocp-dasd.service
  # Announce we've finished
  echo "ipconf changes completed."
}

# Main starts here
echo "Checking IP configuration for $MYID..."

FN="${FP}/${MYID}.IFCFG"
if [ -f ${FN} ]; then
  changeIP ${FN}
elif [ -f ${FP}/ZVMIP.CONF ]; then
  changeIP ${FP}/ZVMIP.CONF
else
  echo "No IP config file found."
fi
