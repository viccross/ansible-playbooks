---
- name: Copy the Grafana and InfluxDB images
  copy:
    src: /opt/resources/{{ item }}.tar
    dest: /tmp/
  loop:
    - grafana-11.2.2
    - influxdb-1.8.9

- name: Load the Grafana and InfluxDB images
  containers.podman.podman_load:
    input: /tmp/{{ item }}.tar
  loop:
    - grafana-11.2.2
    - influxdb-1.8.9

- name: Clean up the image file
  file:
    path: /tmp/{{ item }}.tar
    state: absent
  loop:
    - grafana-11.2.2
    - influxdb-1.8.9

- name: Create volumes for the Grafana and InfluxDB containers
  containers.podman.podman_volume:
    name: "{{ item }}"
  loop:
    - grafana
    - influxdb

- name: Set up the pod
  containers.podman.podman_pod:
    name: vmprf
    state: created
    ports:
      - "3000:3000"
      - "8086:8086"

- name: Create the Grafana config directory
  file:
    path: /etc/grafana
    state: directory
    owner: root
    group: root
    mode: 0755

- name: Create the Grafana log directory
  file:
    path: /var/log/grafana
    state: directory
    owner: root
    group: root
    mode: 0755

- name: Create the InfluxDB config directory
  file:
    path: /etc/vmprf/influxdb
    state: directory
    owner: root
    group: root
    mode: 0755

- name: Configure Grafana
  template:
    src: grafana.ini.j2
    dest: /etc/grafana/grafana.ini
    mode: 0644
    owner: root
    group: root

- name: Configure InfluxDB
  copy:
    dest: /etc/vmprf/influxdb/influxdb.conf
    content: |
      reporting-disabled = true
      bind-address = ""
      [meta]
        dir = "/var/lib/influxdb/meta"
      [data]
        dir = "/var/lib/influxdb/data"
        wal-dir = "/var/lib/influxdb/wal"
      [http]
        auth-enabled = true
    owner: root
    mode: 0644

- name: Define the InfluxDB container in the pod
  containers.podman.podman_container:
    image: icr.io/ibmz/influxdb:1.8.9
    name: influxdb
    pod: vmprf
    state: created
    env:
      INFLUXDB_ADMIN_USER: support
      INFLUXDB_ADMIN_PASSWORD: ibmzvm
    volumes:
      - "/etc/vmprf/influxdb/:/etc/influxdb/:z,ro"
      - "influxdb:/var/lib/influxdb"

- name: SELinux define the InfluxDB port (so Grafana can connect)
  seport:
    ports: 8086
    proto: tcp
    setype: http_port_t
    state: present

- name: Open the port on the firewall
  firewalld:
    port: 8086/tcp
    permanent: true
    immediate: true
    zone: "{{ item }}"
    state: enabled
  loop:
    - internal
    - public

- name: Start the InfluxDB container to set up the DB
  containers.podman.podman_pod:
    name: vmprf
    recreate: false
    state: started
    ports: 
      - "3000:3000"
      - "8086:8086"

- name: Copy the influx cli from the pod/container
  containers.podman.podman_container_copy:
    from_container: true
    container: influxdb
    src: /usr/bin/influx
    dest: /usr/local/bin/influx

- name: Define the database
  containers.podman.podman_container_exec:
    name: influxdb
    command: influx -username support -password "ibmzvm" -execute "create database zvm; alter retention policy autogen on zvm duration 4w; show databases"

- name: Create datapump user and set permissions
  containers.podman.podman_container_exec:
    name: influxdb
    command: influx -username support -password "ibmzvm" -execute "create user datapump with password 'Secret123'; grant write on zvm to datapump"

- name: Create grafana user and set permissions
  containers.podman.podman_container_exec:
    name: influxdb
    command: influx -username support -password "ibmzvm" -execute "create user grafana with password 'Just2read'; grant read on zvm to grafana"

- name: Grant stats access to grafana user
  containers.podman.podman_container_exec:
    name: influxdb
    command: influx -username support -password "ibmzvm" -execute "grant read on _internal to grafana"
  register: result
  retries: 6
  delay: 10
  until: result is not failed

- name: Stop the InfluxDB container once DB is set up
  containers.podman.podman_pod:
    name: vmprf
    state: stopped

- name: Create provisioning file for InfluxDB datasource
  copy:
    dest: /etc/grafana/provisioning/datasources/influxdb-zvm.yaml
    content: |
      apiVersion: 1

      datasources:
        - name: InfluxDB-zvm
          uid: InfluxDBzvm
          type: influxdb
          url: http://localhost:8086/
          database: zvm
          user: grafana
          secureJsonData:
            password: Just2read

    mode: 0644
    owner: root
    group: root

- name: Create the dashboard provisioning config file
  copy:
    dest: /etc/grafana/provisioning/dashboards/datapump.yaml
    content: |
      apiVersion: 1

      providers:
        - name: zVMDataPump
          folder: "z/VM Performance dashboards"
          type: file
          options:
            path:
              /etc/grafana/dashboards/datapump
    mode: 0644
    owner: root
    group: root

- name: Populate the Data Pump dashboard directory
  include_tasks:
    file: fetch-and-update-dashboard.yml
  loop:
    - { number: "19002", name: "z/VM Overview" }
    - { number: "19003", name: "z/VM Memory and Paging" }
    - { number: "19020", name: "z/VM APVIRT and Crypto Express" }
    - { number: "19028", name: "z/VM CPU Cache Metrics" }
    - { number: "19138", name: "z/VM Shared File System Usage" }
    - { number: "19158", name: "z/VM SSI Overview" }
    - { number: "19204", name: "z/VM Virtual Switch Activity" }
    - { number: "19263", name: "z/VM LPAR Overview" }
    - { number: "19311", name: "z/VM Multi-System Overview" }
    - { number: "21407", name: "z/VM Linux Guest Detail" }

- name: Define the Grafana container in the pod
  containers.podman.podman_container:
    image: icr.io/ibmz/grafana:11.2.2
    name: grafana
    pod: vmprf
    env:
      LOG_DIR: /var/log/grafana
      CONF_FILE: /etc/grafana/grafana.ini
      DATA_DIR: /var/lib/grafana
      CONF_DIR: /etc/grafana
      PROVISIONING_CFG_DIR: /etc/grafana/provisioning
    volumes:
      - /etc/grafana/:/etc/grafana/:z,ro
      - grafana:/var/lib/grafana
      - /var/log/grafana/:/var/log/grafana/:z,rw

- name: Define the systemd service for the pod
  containers.podman.podman_generate_systemd:
    name: vmprf
    dest: /usr/local/lib/systemd/system/
    requires: network-online

- name: Enable the pod service
  ansible.builtin.systemd:
    name: pod-vmprf
    daemon-reload: true
    state: stopped
    enabled: true
