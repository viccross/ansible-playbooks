---
# tasks file for create-cluster

- name: Grab the pull secret
  stat:
    path: "{% raw %}{{ webroot }}/.cluster/{{ cluster_values.secret }}{% endraw %}"
  register: ps
- name: abort if the pull secret is not present
  fail:
    msg: "OCP pull secret is not found!"
  when: ps.stat.size == 0

- name: remove prior openshift workdir
  file:
    path: "{{ workdir }}"
    state: absent

- name: create openshift workdir
  file:
    path: "{{ workdir }}"
    state: "directory"
    owner: "{% raw %}csid_{{ cluster_name }}{% endraw %}"
    group: rhocp_clusters
    mode: 06755

- name: copy the ZNETBOOT config files to CMS
  block:
  - name: unmount the CMSFS
    command:
      cmd: fusermount -u {{ znetboot_cfg_path }}
# the DASD has to be cycled to pick up new link mode :/
  - name: vary the DASD offline
    command:
      cmd: chccwdev -d 191
  - name: link the DASD in write mode
    command:
      cmd: vmcp link {{ znetboot_cfg_disk }} 191 mr
  - name: vary the DASD online
    command:
      cmd: chccwdev -e 191
  - name: pause for udev/systemd
    pause:
      seconds: 3
# Can't use Ansible copy module due to CMSFS semantics
# (and stubbornness of Ansible)
  - name: copy the files
    shell:
      cmd: "rm -f {{ znetboot_cfg_path }}/OCP*.ZNETBOOT && cp {{ webroot }}/bootfiles/*.znetboot {{ znetboot_cfg_path }}/"
  - name: unmount the CMSFS
    command:
      cmd: fusermount -u {{ znetboot_cfg_path }}
# the DASD has to be cycled to pick up new link mode :/
  - name: vary the DASD offline
    command:
      cmd: chccwdev -d 191
  - name: link the DASD in read mode
    command:
      cmd: vmcp link {{ znetboot_cfg_disk }} 191 rr
  - name: vary the DASD online
    command:
      cmd: chccwdev -e 191

# install config is deleted when ignition
# configs are created.  this task also
# creates a copy to check for debugging
- name: generate install-config.yaml
  tags: config
  template:
    dest: "{{ workdir }}/{% raw %}{{ item }}{% endraw %}"
    src: install-config.yaml.j2
    mode: 0644
  with_items:
  - install-config.yaml
  - install-config.copy.yaml

- name: create ignition configs
  tags: config
  shell: "openshift-install --dir=`pwd` create ignition-configs"
  args:
    chdir: "{{ workdir }}"
    creates: "{{ workdir }}/metadata.json"

- name: create additional config mods in ignition
  block:
  - name: back up the ignition files
    tags: config
    shell: ls {{ workdir }}/*.ign
    register: ign_raw
  - name: back up ignition configs
    tags: config
    copy:
      src: "{% raw %}{{ item }}{% endraw %}"
      dest: "{% raw %}{{ item }}{% endraw %}.bak"
      remote_src: yes
      mode: 0644
    with_items: "{% raw %}{{ ign_raw.stdout_lines }}{% endraw %}"
  - name: create bootstrap directory
    file:
      path: "{{ workdir }}/bootstrap/etc"
      state: directory
      mode: 0755
  - name: create our chrony.conf file
    template:
      dest: "{{ workdir }}/bootstrap/etc/chrony.conf"
      src: chrony.conf.j2
      mode: 0644
  - name: filetranspile the ignition files
    command: filetranspile -i {% raw %}{{ item }}{% endraw %}.bak -f bootstrap -o {% raw %}{{ item }}{% endraw %}{{ '' }}
    args:
      chdir: "{{ workdir }}"
    with_items: "{% raw %}{{ ign_raw.stdout_lines }}{% endraw %}"
#  - name: create ignition manifests
#    tags: config
#    shell: "openshift-install --dir=`pwd` create manifests"
#    args:
#      chdir: "{{ workdir }}"
#      creates: "{{ workdir }}/manifests"
#  - name: create manifest files for chrony config
#    template:
#      dest: "{{ workdir }}/manifests/99_{% raw %}{{ item }}{% endraw %}-chrony-configuration.yaml"
#      src: chrony-manifest.yaml.j2
#      mode: 0644
#    loop:
#      - "master"
#      - "worker"
#  - name: copy/recover the install-config.yaml
#    copy:
#      src: "{{ workdir }}/install-config.copy.yaml"
#      dest: "{{ workdir }}/install-config.yaml"
#      mode: 0644
#  - name: re-create ignition configs
#    tags: config
#    shell: "openshift-install --dir=`pwd` create ignition-configs"
#    args:
#      chdir: "{{ workdir }}"

- block:
  - name: make ignition config directory
    file:
      path: "{% raw %}/var/www/html/ignition/{{ cluster_name }}{% endraw %}"
      state: directory
      mode: 0755
  - name: get ign files
    tags: config
    shell: ls {{ workdir }}/*.ign
    register: ign_raw
  - name: copy ignition configs to cluster ignition directory
    tags: config
    copy:
      src: "{% raw %}{{ item }}{% endraw %}"
      dest: "{% raw %}/var/www/html/ignition/{{ cluster_name }}/{% endraw %}"
      remote_src: yes
      mode: 0644
    with_items: "{% raw %}{{ ign_raw.stdout_lines }}{% endraw %}"

- name: install kubeconfig
  tags: wait-install
  copy:
    src: "{{ workdir }}/auth/kubeconfig"
    dest: "{% raw %}~csid_{{ cluster_name }}/.kube/config{% endraw %}"
    remote_src: yes
    force: yes
    mode: 0640

- name: create /etc/hosts entry
  tags: etc-hosts
  connection: local
  copy:
    dest: "{% raw %}{{ playbook_dir }}{% endraw %}/../etc.hosts"
    mode: 0644
    content: >
      {{ bastion_public_ip_address }}
      bastion.{{ cluster_domain_name }}
      api.{{ cluster_domain_name }}
      console-openshift-console.apps.{{ cluster_domain_name }}
      oauth-openshift.apps.{{ cluster_domain_name }}

- name: boot the bootstrap node
  include_tasks: boot-guest.yml
  vars:
    coreos_role: bootstrap
  with_items: "{% raw %}{{ cluster['nodes'][coreos_role] }}{% endraw %}"

- name: boot the control nodes
  include_tasks: boot-guest.yml
  vars:
    coreos_role: control
  with_items: "{% raw %}{{ cluster['nodes'][coreos_role] }}{% endraw %}"

- name: boot the compute nodes
  include_tasks: boot-guest.yml
  vars:
    coreos_role: compute
  with_items: "{% raw %}{{ cluster['nodes'][coreos_role] }}{% endraw %}"
  when: cluster['nodes'].compute is defined

- name: wait for bootstrap node accessibility
  wait_for:
    port: 22
    host: "{% raw %}{{ cluster['nodes']['bootstrap'][item].ip }}{% endraw %}"
    search_regex: OpenSSH
    delay: 1
    timeout: 10000
  with_items: "{% raw %}{{ cluster['nodes']['bootstrap'] }}{% endraw %}"

- name: wait for master node accessibility
  wait_for:
    port: 22
    host: "{% raw %}{{ cluster['nodes']['control'][item].ip }}{% endraw %}"
    search_regex: OpenSSH
    delay: 1
    timeout: 5000
  with_items: "{% raw %}{{ cluster['nodes']['control'] }}{% endraw %}"

- name: wait for bootstrap complete # noqa 301
  tags: config
  shell: openshift-install --dir=`pwd` wait-for bootstrap-complete --log-level debug
  args:
    chdir: "{{ workdir }}"
  register: result
  retries: 2
  delay: 0
  until: result is not failed

- name: shut down the bootstrap node # noqa 301
  shell: smcli id -T {% raw %}{{ cluster['nodes']['bootstrap'][item].name }}{% endraw %} -t 'WITHIN 60' -H {{ ocp_smapi_host|quote }} -U {{ ocp_smapi_user|quote }} -P {{ ocp_smapi_password|quote }}
  with_items: "{% raw %}{{ cluster['nodes']['bootstrap'] }}{% endraw %}"

- name: give the bootstrap time to shut down
  pause:
    minutes: 1
  when: cluster['nodes'].bootcompute is defined

- name: rename the bootstrap node for conversion # noqa 301
  shell: smcli ichid -T {% raw %}{{ cluster['nodes']["bootstrap"]['bootstrap']['name'] }}{% endraw %} -n {% raw %}{{ cluster['nodes']["bootcompute"]['compute-2']['name'] }}{% endraw %} -H {{ ocp_smapi_host|quote }} -U {{ ocp_smapi_user|quote }} -P {{ ocp_smapi_password|quote }}
  when: cluster['nodes'].bootcompute is defined

- name: make sure converted node can access the config disk
  shell:
    cmd: |
      ldapmodify -Zx -h LDAPSRV.ibmpoc.internal -p 389 -D racfid=IBMAUTO,profiletype=user,o=ibmzvm -w 'jTghTGinJupD63yh' <<EOFLDIF
      dn: profilename={{ znetboot_cfg_disk | replace(' ','.') }},profiletype=VMMDISK,o=ibmzvm
      changetype: modify
      add: racfaccesscontrol
      racfaccesscontrol: ID({% raw %}{{ cluster['nodes']['bootcompute'][item].name }}{% endraw %}) ACCESS(READ) COUNT(0)
      EOFLDIF
  with_items: "{% raw %}{{ cluster['nodes']['bootcompute'] }}{% endraw %}"
  when: cluster['nodes'].bootcompute is defined

- name: boot the converted compute node
  include_tasks: boot-guest.yml
  vars:
    coreos_role: bootcompute
  with_items: "{% raw %}{{ cluster['nodes'][coreos_role] }}{% endraw %}"
  when: cluster['nodes'].bootcompute is defined

- name: wait for compute node accessibility
  wait_for:
    port: 22
    host: "{% raw %}{{ cluster['nodes']['compute'][item].ip }}{% endraw %}"
    search_regex: OpenSSH
    delay: 1
    timeout: 5000
  with_items: "{% raw %}{{ cluster['nodes']['compute'] }}{% endraw %}"
  when: cluster['nodes'].compute is defined

- name: start the approve-csrs task
  systemd:
    name: ocp-approve-csrs
    state: started

- name: wait for install complete # noqa 301
  tags: wait-install
  shell: openshift-install --dir=`pwd` wait-for install-complete
  args:
    chdir: "{{ workdir }}"
  register: result
  retries: 2
  delay: 0
  until: result is not failed

- name: update boot device on the master nodes
  include_tasks: guest-IPLdev.yml
  vars:
    coreos_role: control
  with_items: "{% raw %}{{ cluster['nodes'][coreos_role] }}{% endraw %}"

- name: update boot device on the worker nodes
  include_tasks: guest-IPLdev.yml
  vars:
    coreos_role: compute
  with_items: "{% raw %}{{ cluster['nodes'][coreos_role] }}{% endraw %}"
  when: cluster['nodes'].compute is defined

- name: update boot device on the converted bootstrap node
  include_tasks: guest-IPLdev.yml
  vars:
    coreos_role: bootcompute
  with_items: "{% raw %}{{ cluster['nodes'][coreos_role] }}{% endraw %}"
  when: cluster['nodes'].bootcompute is defined

- name: configure the cluster (LDAP, ingress certificate)
  include_tasks: configure-cluster.yml

- name: enable the start-the-guests service
  systemd:
    name: ocp-guests-start
    state: stopped
    enabled: yes

- name: give the converted bootstrap node time to build
  pause:
    minutes: 10

- name: stop the approve-csrs task
  systemd:
    name: ocp-approve-csrs
    state: stopped
