#!/bin/bash
# =================================================================
# Licensed Materials - Property of IBM
#
# (c) Copyright IBM Corp. 2021 All Rights Reserved
#
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
# =================================================================
#
# icic-setup.sh
# Set up ICIC to the z/VM system
# - Script is deployed by Ansible (TBC)
# - Run at boot time if ICIC is requested
#

# SMAPI credentials are the same each time so set once
smapiauth='-H {{ ocp_smapi_host }} -U {{ ocp_smapi_user }} -P {{ ocp_smapi_password }}'
# This URL will be generated by the web interface; it will be sourced from file created by the Portal
fastvmurl=$(cat {{ webroot }}/.secret/.fastvmurl)
# set the size of the minidisks needed
mdsizeckd=10016             # This is 3390-9 less one cylinder
mdsizefba=20971488          # This is 10GB less 32 blocks (8 pages)
# Add the ICIC guests
icicmgt="ICICMGT0"
iciccmp="ICICCMP0"
icicguests="${icicmgt} ${iciccmp}"
# set a couple of variables
mgtspaceckd=50000           # This is adding approx 35GB
cmpspaceckd=110000          # This is adding approx 75GB
mgtspacefba=67108864        # This is adding approx 32GB
cmpspacefba=150994944       # This is adding approx 72GB
extnetdev=encad0

# pull in the existing IP details
source <(grep ^NETMASK /etc/sysconfig/network-scripts/ifcfg-${extnetdev})
source <(grep ^PREFIX /etc/sysconfig/network-scripts/ifcfg-${extnetdev})
source <(grep ^GATEWAY /mnt/znetboot/ZVMIP.CONF)
source <(grep ^DOMAIN /mnt/znetboot/ZVMIP.CONF); DOMAIN=${DOMAIN,,}
source <(grep ^DNS /mnt/znetboot/ZVMIP.CONF)

nextip() {
  IP=$1
  IP_HEX=$(printf '%.2X%.2X%.2X%.2X\n' `echo $IP | sed -e 's/\./ /g'`)
  NEXT_IP_HEX=$(printf %.8X `echo $(( 0x$IP_HEX + 1 ))`)
  NEXT_IP=$(printf '%d.%d.%d.%d\n' `echo $NEXT_IP_HEX | sed -r 's/(..)/0x\1 /g'`)
  echo "$NEXT_IP"
}

netconf() {
  HN=$1
  IP=$2
  echo "Updating network config for ${HN} for IP ${IP}..."
  sed -i.bak "/IPADDR/s/^IPADDR=.*$/IPADDR=${IP}/ ; \
              /NETMASK/s/^NETMASK=.*$/NETMASK=${NETMASK}/ ; \
              /PREFIX/s/^PREFIX=.*$/PREFIX=${PREFIX}/ ; \
              /GATEWAY/s/^GATEWAY=.*$/GATEWAY=${GATEWAY}/ " /mnt/sysimage/etc/sysconfig/network-scripts/ifcfg-${extnetdev}
  if [ -v DNS1 ]; then
    echo "DNS1=${DNS1}" >> /mnt/sysimage/etc/sysconfig/network-scripts/ifcfg-${extnetdev}
    if [ -v DNS2 ]; then
      echo "DNS2=${DNS2}" >> /mnt/sysimage/etc/sysconfig/network-scripts/ifcfg-${extnetdev}
      if [ -v DNS3 ]; then
        echo "DNS3=${DNS3}" >> /mnt/sysimage/etc/sysconfig/network-scripts/ifcfg-${extnetdev}
      fi
    fi
  fi
  # Write out the new hostname
  echo ${HN,,}.${DOMAIN} > /mnt/sysimage/etc/hostname
  # Append hostnames to /etc/hosts
  echo "${mgtip} ${icicmgt,,}.${DOMAIN} ${icicmgt,,}" >> /mnt/sysimage/etc/hosts
  echo "${cmpip} ${iciccmp,,}.${DOMAIN} ${iciccmp,,}" >> /mnt/sysimage/etc/hosts
  # write the LDAP hostname detail to /etc/hosts
  echo "172.24.26.10 ldapsrv.ibmpoc.internal" >> /mnt/sysimage/etc/hosts
  # copy the CA certificates
  cp -a /etc/pki/tls/certs/oqsRootCA.cert /mnt/sysimage/etc/pki/ca-trust/source/anchors/oqsRootCA.pem
  cp -a /etc/pki/tls/certs/oqsCA.cert /mnt/sysimage/etc/pki/ca-trust/source/anchors/oqsCA.pem
}

growguest() {
  # Add extra disk space to the two guests.
  # ICIC requirement is 40GB on the management node and 80GB on the compute node.
  # This means an extra 32-35GB on the management and 72-75GB on the compute.
  # From the available disks, let's find out what space is available and grab
  # space until we get what's needed.

  GUEST=$1

  # Look for what type of space we have: if we find no "3390-" then it's FBA.
  if [ "$(smcli ivsqd -T IBMAUTO -q 3 -e 3 ${smapiauth} -n LINUX  | grep 3390- | wc -l)" == "0" ]; then
    mdsize=${mdsizefba}
    if [[ ${GUEST} =~ "MGT" ]]; then
      SPACE=${mgtspacefba}
    else
      SPACE=${cmpspacefba}
    fi
  else
    mdsize=${mdsizeckd}
    if [[ ${GUEST} =~ "MGT" ]]; then
      SPACE=${mgtspaceckd}
    else
      SPACE=${cmpspaceckd}
    fi
  fi

  # list the available volumes, filtering out anything smaller than half the size of the initial disk
  mapfile -t dasds < <(smcli ivsqd -T IBMAUTO -q 2 -e 3 ${smapiauth} -n LINUX | awk -v size=$((mdsize / 2)) '{ if ($4 >= size) {print} }')
  # run through a loop to accumulate disk space
  devnum=201; dasdnum=0;
  until [ ${SPACE} -eq 0 ]; do
    # grab an available space
    IFS=" " read -r -a dasd <<< ${dasds[$((dasdnum++))]}
    IFS=" " avail=${dasd[3]}
    if [ "${avail}" -ge "${SPACE}" ]; then
      # This disk has more free space than we need, just grab it
      alloc=${SPACE}
      SPACE=0
    else
      # This disk doesn't have enough, grab all we can and we'll need to come back again
      alloc=${avail}
      SPACE=$(( SPACE - alloc ))
    fi
    # issue an smcli idicrd for the dasd
    echo "Allocating ${GUEST} mdisk ${devnum} with space ${alloc} onto volume ${dasd[0]}..."
    smcli idicrd -T ${GUEST} -a $((devnum++)) -d X -t AUTOV -n ${dasd[0]} -u 1 -s ${alloc} -m MR -f 1 ${smapiauth}
  done
}

# pause until SMAPI is active, then a little more
until vmcp Q VSMREQIN 2>/dev/null ; do
  echo "Pausing to wait for SMAPI listener"
  sleep 10
done
sleep 3
echo "SMAPI listener active, continuing..."

### We might need this DASD detection stuff...
### Let's keep it here for now (commented)
#ocpdasd=ZVMU
#
## Check if any of the DASDs are not attached
#mapfile -t dasds < <(
#        sudo vmcp -b 64k q dasd free |
#        tr [','] ['\n'] | grep ${ocpdasd} | awk '{print $2;}')
#
#if [ ${#dasds[@]} != 0 ] ; then
#        echo "Some of our DASDs are not attached. Attaching now"
#        for dasd in ${dasds[@]}; do
#                sudo vmcp att ${dasd} to system
#        done
#fi
#
## obtain list of DASDs
## We obtain label and cylinder size... turns out we don't need the size :/ )
#mapfile -t dasds < <(
#        for DASD in $(sudo vmcp -b 32k q dasd |
#        grep ${ocpdasd} | awk '{print $2;}') ; do
#                sudo vmcp q da details $DASD |
#                grep CYLS | awk '{print $10 $13;}' | awk -F, '{print $1, $2 ;}'
#        done )
#
#if [ ${#dasds[@]} = 0 ] ; then
#        echo "There are no DASDs!";
#        exit 1;
#fi
#
## loop through the DASD list to see if the DASD is defined to DIRM, define if not
#IFS='\n';
#for dasd in ${dasds[@]}; do
#        echo "Checking ${dasd% *}..."
#        smcli ivsqd -T IBMAUTO -q 1 -e 1 -H 172.24.26.10/44444 -U IBMAUTO -P '8L$YN2FO' -n ${dasd% *}
#        if [ $? = 1 ]; then
#                let size=${dasd#* }-1
#                smcli ivsdd -T IBMAUTO -H 172.24.26.10/44444 -U IBMAUTO -P '8L$YN2FO' -f4 -t0 -r ${dasd% *} -v ${dasd% *} -g OCPDASD
#        else
#                echo "DASD already defined, no action";
#        fi
#done

# fetch our current IP address, and strip the netmask off the end
myip=$(ip -br addr show dev encad0 | awk '{print $3}') # the devname in here has to be set using Ansible too
tmpip=${myip%/*}
IFS=" ";

# list the available volumes with sufficient free space
mapfile -t dasds < <(smcli ivsqd -T IBMAUTO -q 2 -e 3 ${smapiauth} -n LINUX | awk -v size=${mdsize} '{ if ($4 >= size) {print} }')
# add the management guest
smcli icd -T ${icicmgt} ${smapiauth} < ${icicmgt}.direct
# add the compute guest
smcli icd -T ${iciccmp} ${smapiauth} < ${iciccmp}.direct
# grab the first DASD from the list
IFS=" " read -r -a dasd <<< ${dasds[0]}
# issue an smcli idicrd for the dasd
smcli idicrd -T ${icicmgt} -a 200 -d X -t AUTOV -n ${dasd[0]} -u 1 -s ${mdsize} -m MR -f 1 ${smapiauth}
# grab the next DASD from the list
IFS=" " read -r -a dasd <<< ${dasds[1]}
# issue an smcli idicrd for the dasd
smcli idicrd -T ${iciccmp} -a 200 -d X -t AUTOV -n ${dasd[0]} -u 1 -s ${mdsize} -m MR -f 1 ${smapiauth}

# at this point we have two guests with one minidisk each.
# Now we can do the work to populate.
echo "Writing out the disk image to the ICIC guests..."
# Restore the disk image to the guests
cio_ignore -r 1200,1201
vmcp link ${icicmgt} 200 1200 w
vmcp link ${iciccmp} 200 1201 w
# echo 1 > /sys/bus/ccw/devices/0.0.1200/raw_track_access
chccwdev --attribute raw_track_access=1 -e 1200,1201
# Fetch the disk image file
icicimg=$(curl ${fastvmurl}/ICICIMG.txt 2>/dev/null)
echo "Fetching ${icicimg%.*} for restoration..."
curl ${fastvmurl}/${icicimg} | zcat | tee \
	>(dd of=/dev/$(lsdasd | grep 0.0.1200 | awk '{print $3}') bs=64k iflag=fullblock oflag=direct) \
	| dd of=/dev/$(lsdasd | grep 0.0.1201 | awk '{print $3}') bs=64k iflag=fullblock oflag=direct
sync;sync;sync
sleep 1

# There should not be anything holding the disks open, so using the "safe" option should be enough to release them
until chccwdev -s 1200,1201 ; do
  echo "Waiting for DASD to release..."
  sleep 1;
done

mgtip=$(nextip ${tmpip})
cmpip=$(nextip ${mgtip})
# One at a time, we'll update the configuration of the imaged systems.  First, the management:
chccwdev --attribute raw_track_access=0 -e 1200
# give the VG a little time to settle before mounting
sleep 3
mount /dev/rhel_rhel8img/root /mnt/sysimage
# change the interface details
netconf ${icicmgt} ${mgtip}
# Purge the old SSH host keys for regenertion at boot
rm -f /mnt/sysimage/etc/ssh/ssh_host_*
# Add the  SSH key from here to the management node
cat /root/.ssh/id_rsa.pub >> /mnt/sysimage/root/.ssh/authorized_keys
# Rewrite the URL for the ICICdeps, jic
sed -i.bak "/baseurl/s/^baseurl=.*$/baseurl=http:\/\/172.24.26.1:8080\/ICICdeps/" /mnt/sysimage/etc/yum.repos.d/ICICdeps.repo

# Done now... unmount, remove the VG, release the disk
umount /mnt/sysimage
vgchange -an rhel_rhel8img
sleep 1
# There should not be anything holding the disks open, so using the "safe" option should be enough to release them
until chccwdev -s 1200 ; do
  echo "Waiting for DASD to release..."
  sleep 1;
done

# Second, the compute:
chccwdev --attribute raw_track_access=0 -e 1201
# give the VG a little time to settle before mounting
sleep 3
mount /dev/rhel_rhel8img/root /mnt/sysimage
# change the interface details
netconf ${iciccmp} ${cmpip}
# Update the address for the internal interface
sed -i.bak '/IPADDR/s/11/12/' /mnt/sysimage/etc/sysconfig/network-scripts/ifcfg-encad8
# Purge the old SSH host keys for regenertion at boot
rm -f /mnt/sysimage/etc/ssh/ssh_host_*
# Add the  SSH key from here to the management node
cat /root/.ssh/id_rsa.pub >> /mnt/sysimage/root/.ssh/authorized_keys
# Rewrite the URL for the ICICdeps
sed -i.bak "/baseurl/s/^baseurl=.*$/baseurl=http:\/\/172.24.26.1:8080\/ICICdeps/" /mnt/sysimage/etc/yum.repos.d/ICICdeps.repo

# Done now... unmount, remove the VG, release the disk
umount /mnt/sysimage
vgchange -an rhel_rhel8img
sleep 1
# There should not be anything holding the disks open, so using the "safe" option should be enough to release them
until chccwdev -s 1201 ; do
  echo "Waiting for DASD to release..."
  sleep 1;
done

# The disks are finished with now.
cio_ignore -a 1200,1201
vmcp detach 1200 1201

# Call function to grow the managaement node
growguest ${icicmgt}
# Call function to grow the compute node
growguest ${iciccmp}

# Add the host details to our local /etc/hosts
echo "${mgtip} ${icicmgt,,}.${DOMAIN} ${icicmgt,,}" >> /etc/hosts
echo "${cmpip} ${iciccmp,,}.${DOMAIN} ${iciccmp,,}" >> /etc/hosts

# Fetch the ICIC dependencies content and expand it
icicdep=$(curl ${fastvmurl}/ICICDEP.txt 2>/dev/null)
echo "Fetching ${icicdep%.*} for ICIC dependencies..."
curl ${fastvmurl}/${icicdep} 2>/dev/null | tar -C /var/www/html/ -zx

## Fetch the ICIC install code
#iciccode=$(curl ${fastvmurl}/ICICCODE.txt 2>/dev/null)
#echo "Fetching ${iciccode%.*} for ICIC installation..."
#curl -o /srv/nfs/ICICCODE.txt ${fastvmurl}/ICICCODE.txt 2>/dev/null
#curl -o /srv/nfs/${iciccode} ${fastvmurl}/${iciccode} 2>/dev/null

# IPLing the management guest
echo "Issuing a SMAPI IPL for the management guest..."
smcli ia -T ${icicmgt} ${smapiauth}
sleep 1
echo "Starting the Ansible configuration of management guest..."
cd /opt/ansible && ansible-playbook -i inventory -v setup-icic-management.yml

# set RACF OPERATIONS on the compute guest
echo "Adding RACF attribute to ${iciccmp}..."
ldapmodify -Zx -h LDAPSRV.ibmpoc.internal -p 389 -D racfid={{ ocp_smapi_user }},profiletype=user,o=ibmzvm -w '{{ ocp_smapi_password }}' <<EOFLDIF
dn: racfid=iciccmp0,profiletype=user,o=ibmzvm
changetype: modify
add: racfattributes
racfattributes: OPERATIONS
-
EOFLDIF

# Once the management node is set up, go ahead and boot the compute node
# Ansible will wait for it to be up and then run the auto'n to configure
echo "Issuing a SMAPI IPL for the compute guest..."
smcli ia -T ${iciccmp} ${smapiauth}
sleep 1
echo "Starting the Ansible configuration of ICIC for our z/VM system..."
cd /opt/ansible && ansible-playbook -i inventory -v setup-icic-compute.yml

# once compute node is added, go back and do the LDAP setup
echo "Setting up LDAP as authentication source..."
cd /opt/ansible && ansible-playbook -i inventory -v setup-icic-ldap.yml
