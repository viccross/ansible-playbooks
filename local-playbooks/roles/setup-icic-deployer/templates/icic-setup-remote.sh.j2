#!/bin/bash -e
# =================================================================
# Licensed Materials - Property of IBM
#
# (c) Copyright IBM Corp. 2024 All Rights Reserved
#
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
# =================================================================
#
# icic-setup.sh
# Set up ICIC to the z/VM system - Version 2.0
# - Script is deployed by Ansible (TBC)
# - Run at boot time if ICIC is requested
# - Updated for modularisation
#

# SMAPI credentials are the same each time so set once
source /etc/zvmesi/settings.env

# Setup some vars:
# The version to be installed is an environment variable from the host Ansible
# The code is in a module file in the "content" directory
#icicver=$(cat {{ webroot }}/.secret/.icicver)
modpath="/opt/content/icic-${icicver}.esi"
icicpath="/opt/icic/${icicver}"

# set the size of the minidisks needed
mdsizeckd=10016             # This is 3390-9 less one cylinder
mdsizefba=20971488          # This is 10GB less 32 blocks (8 pages)

# Add the ICIC compute node -- the name will come from environment
#iciccmp="ICICCMP1"
icicguests="${iciccmp}"
# set a couple of variables
mgtspaceckd=50000           # This is adding approx 35GB
cmpspaceckd=110000          # This is adding approx 75GB
mgtspacefba=67108864        # This is adding approx 32GB
cmpspacefba=150994944       # This is adding approx 72GB
extnetdev=encad0

# pull in the existing IP details
source <(grep ^NETMASK /etc/sysconfig/network-scripts/ifcfg-${extnetdev})
source <(grep ^PREFIX /etc/sysconfig/network-scripts/ifcfg-${extnetdev})
source <(grep ^GATEWAY /mnt/znetboot/ZVMIP.CONF)
source <(grep ^DOMAIN /mnt/znetboot/ZVMIP.CONF); DOMAIN=${DOMAIN,,}
source <(grep ^DNS /mnt/znetboot/ZVMIP.CONF)
source <(grep ^VLAN /mnt/znetboot/ZVMIP.CONF)

nextip() {
  IP=$1
  IP_HEX=$(printf '%.2X%.2X%.2X%.2X\n' `echo $IP | sed -e 's/\./ /g'`)
  NEXT_IP_HEX=$(printf %.8X `echo $(( 0x$IP_HEX + 1 ))`)
  NEXT_IP=$(printf '%d.%d.%d.%d\n' `echo $NEXT_IP_HEX | sed -r 's/(..)/0x\1 /g'`)
  echo "$NEXT_IP"
}

netconf() {
  HN=$1
  IP=$2
  echo "Updating network config for ${HN} for IP ${IP}..."
  sed -i.bak "/IPADDR/s/^IPADDR=.*$/IPADDR=${IP}/ ; \
              /NETMASK/s/^NETMASK=.*$/NETMASK=${NETMASK}/ ; \
              /PREFIX/s/^PREFIX=.*$/PREFIX=${PREFIX}/ ; \
              /GATEWAY/s/^GATEWAY=.*$/GATEWAY=${GATEWAY}/ " /mnt/sysimage/etc/sysconfig/network-scripts/ifcfg-${extnetdev}
  if [ -v DNS1 ]; then
    echo "DNS1=${DNS1}" >> /mnt/sysimage/etc/sysconfig/network-scripts/ifcfg-${extnetdev}
    if [ -v DNS2 ]; then
      echo "DNS2=${DNS2}" >> /mnt/sysimage/etc/sysconfig/network-scripts/ifcfg-${extnetdev}
      if [ -v DNS3 ]; then
        echo "DNS3=${DNS3}" >> /mnt/sysimage/etc/sysconfig/network-scripts/ifcfg-${extnetdev}
      fi
    fi
  fi
  # Write out the new hostname
  echo ${HN,,}.${DOMAIN} > /mnt/sysimage/etc/hostname
  # Append hostname to /etc/hosts
  echo "${cmpip} ${iciccmp,,}.${DOMAIN} ${iciccmp,,}" >> /mnt/sysimage/etc/hosts
  # write the LDAP hostname detail to /etc/hosts
  echo "172.24.26.10 ldapsrv.ibmpoc.internal" >> /mnt/sysimage/etc/hosts
  # copy the CA certificates
  cp -a /etc/pki/tls/certs/oqsRootCA.cert /mnt/sysimage/etc/pki/ca-trust/source/anchors/oqsRootCA.pem
  cp -a /etc/pki/tls/certs/oqsCA.cert /mnt/sysimage/etc/pki/ca-trust/source/anchors/oqsCA.pem
}

growguest() {
  # Add extra disk space to the guest.
  # ICIC requirement is 80GB on the compute node.
  # This means an extra 72-75GB on the compute.
  # From the available disks, let's find out what space is available and grab
  # space until we get what's needed.

  GUEST=$1
  SPACE=$2

  # list the available volumes, filtering out anything smaller than half the size of the initial disk
  mapfile -t dasds < <(smcli ivsqd -T IBMAUTO -q 2 -e 3 ${smapiauth} -n LINUX | awk -v size=$((mdsize / 2)) '{ if ($4 >= size) {print} }')
  # run through a loop to accumulate disk space
  devnum=201; dasdnum=0;
  until [ ${SPACE} -eq 0 ]; do
    # grab an available space
    IFS=" " read -r -a dasd <<< ${dasds[$((dasdnum++))]}
    IFS=" " avail=${dasd[3]}
    # if there is no more DASD, avail will either not be a number or be blank
    if [ -z "${avail}" ] || [ ! -z "${avail//[0-9]}" ]; then
      echo "No DASD volume available, we are ${SPACE} too short"
      break
    fi
    if [ "${avail}" -ge "${SPACE}" ]; then
      # This disk has more free space than we need, just grab it
      alloc=${SPACE}
      SPACE=0
    else
      # This disk doesn't have enough, grab all we can and we'll need to come back again
      alloc=${avail}
      SPACE=$(( SPACE - alloc ))
    fi
    # issue an smcli idicrd for the dasd
    echo "Allocating ${GUEST} mdisk ${devnum} with space ${alloc} onto volume ${dasd[0]}..."
    smcli idicrd -T ${GUEST} -a $((devnum++)) -d X -t AUTOV -n ${dasd[0]} -u 1 -s ${alloc} -m MR -f 1 ${smapiauth}
  done
}

# check if SMAPI is active
if ! systemctl is-active --quiet smapi.service ; then
  echo "SMAPI is not operating, cannot continue"
  exit 5
else
  echo "SMAPI listener active, continuing..."
fi

# Set up the mount of the ICIC module content
cat <<EOF >"/etc/auto.icic-install-${icicver}"
${icicpath}  -fstype=squashfs,exec :${modpath}
EOF
cat <<EOF >"/etc/auto.master.d/icic-install-${icicver}.autofs"
/-  /etc/auto.icic-install-${icicver}
EOF
systemctl reload autofs

if ! ls ${icicpath}/icicimg.txt 2>/dev/null ; then
  echo "ICIC content module file could not be mounted!"
  exit 6
fi

# tmpip was calculated as shown here, now it's passed in environment
# fetch our current IP address, and strip the netmask off the end
#myip=$(ip -br addr show dev encad0 | awk '{print $3}') # the devname in here has to be set using Ansible too
#tmpip=${myip%/*}
IFS=" ";

# Look for what type of space we have: if we find no "3390-" then it's FBA.
if [ "$(smcli ivsqd -T IBMAUTO -q 3 -e 3 ${smapiauth} -n LINUX  | grep 3390- | wc -l)" == "0" ]; then
  disktype=FBA
  mdsize=${mdsizefba}
  mgtspace=${mgtspacefba}
  cmpspace=${cmpspacefba}
else
  disktype=ECKD
  mdsize=${mdsizeckd}
  mgtspace=${mgtspaceckd}
  cmpspace=${cmpspaceckd}
fi

# If VLAN is set, set up a VLAN parameter for the NICDEF statements
if [ ! -z ${VLAN} ]; then
  vlanparm="VLAN ${VLAN}"
else
  vlanparm=""
fi
# list the available volumes with sufficient free space
mapfile -t dasds < <(smcli ivsqd -T IBMAUTO -q 2 -e 3 ${smapiauth} -n LINUX | awk -v size=${mdsize} '{ if ($4 >= size) {print} }')

# add the compute guest
smcli icd -T ${iciccmp} ${smapiauth} < <(sed -e "s/VLANPLACE/${vlanparm}/" -e "s/ICMPCMP1/${iciccmp}" </opt/ansible/files/ICICCMP1.direct )

# recreate the profile
smcli dcd -T icicdflt ${smapiauth} || true
smcli icd -T icicdflt ${smapiauth} < /opt/ansible/files/icicdflt.direct

# grab the first DASD from the list
IFS=" " read -r -a dasd <<< ${dasds[0]}
# issue an smcli idicrd for the dasd
smcli idicrd -T ${iciccmp} -a 200 -d X -t AUTOV -n ${dasd[0]} -u 1 -s ${mdsize} -m MR -f 1 ${smapiauth}

# at this point we have a guest with one minidisk.
# let's get permission to write to it
echo "Adding RACF permissions to CIC boot disk..."
ldapmodify -Zx -h LDAPSRV.ibmpoc.internal -p 389 -D racfid={{ ocp_smapi_user }},profiletype=user,o=ibmzvm -w '{{ ocp_smapi_password }}' <<EOFLDIF
dn: profilename=${iciccmp}.200,profiletype=VMMDISK,o=ibmzvm
changetype: modify
add: racfaccesscontrol
racfaccesscontrol: ID(LXOCPB01) ACCESS(UPDATE) COUNT(0)

EOFLDIF

# Now we can do the work to populate.
echo "Writing out the disk image to the ICIC guests..."
# Restore the disk image to the guest
cio_ignore -r 1200
vmcp link ${iciccmp} 200 1200 w
# echo 1 > /sys/bus/ccw/devices/0.0.1200/raw_track_access
if [ ${disktype} == "ECKD" ]; then
  chccwdev --attribute raw_track_access=1 -e 1200
fi
# Fetch the disk image file
icicimg=$(cat ${icicpath}/icicimg.txt 2>/dev/null)
if [ ${disktype} == "FBA" ]; then
  icicimg=$(echo ${icicimg} | sed -e 's/-/-fba-/g')
fi
echo "Restoring ${icicimg%.*}..."
zcat ${icicpath}/${icicimg} | tee \
	>(dd of=/dev/$(lsdasd | grep 0.0.1200 | awk '{print $3}') bs=64k iflag=fullblock oflag=direct)
sync;sync;sync
sleep 1

# There should not be anything holding the disks open, so using the "safe" option should be enough to release them
until chccwdev -s 1200 ; do
  echo "Waiting for DASD to release..."
  sleep 1;
done

# FIXME -- will get told IP via environment
cmpip=$(nextip ${tmpip})
echo "Telling Ansible about our IP addresses and disk type..."
cat >> /opt/ansible/inventory/group_vars/all/runtime.yml <<EOFYML
#
icic_compute_ip_address: ${cmpip}
diskpool_type: ${disktype}
EOFYML

# Update the configuration of the imaged system.
if [ ${disktype} == "ECKD" ]; then
  chccwdev --attribute raw_track_access=0 -e 1200
fi
# give the VG a little time to settle before mounting
sleep 3
# sometimes it needs a little more help
vgchange -ay
# derive the name of the root LV in the image
rootLV=$(lvs | grep "^[[:space:]]*root.*rhel8img" | awk '{print $1;}')
# go ahead and mount
mount /dev/rhel_rhel8img/${rootLV} /mnt/sysimage
# change the interface details
netconf ${iciccmp} ${cmpip}
# Update the address for the internal interface
sed -i.bak '/IPADDR/s/11/12/' /mnt/sysimage/etc/sysconfig/network-scripts/ifcfg-encad8
# Purge the old SSH host keys for regeneration at boot
rm -f /mnt/sysimage/etc/ssh/ssh_host_*
# Add the SSH keys from here to the management node
cat /root/.ssh/id_ed25519.pub >> /mnt/sysimage/root/.ssh/authorized_keys
cat /root/.ssh/id_rsa_icic.pub >> /mnt/sysimage/root/.ssh/authorized_keys
# Rewrite the URL for the ICICdeps
sed -i.bak "/baseurl/s/^baseurl=.*$/baseurl=http:\/\/172.24.26.1:8080\/ICICdeps/" /mnt/sysimage/etc/yum.repos.d/ICICdeps.repo

# Done now... unmount, remove the VG, release the disk
umount /mnt/sysimage
vgchange -an rhel_rhel8img
sleep 1
# There should not be anything holding the disks open, so using the "safe" option should be enough to release it
until chccwdev -s 1200 ; do
  echo "Waiting for DASD to release..."
  sleep 1;
done

# The disk is finished with now.
cio_ignore -a 1200
vmcp detach 1200

# Call function to grow the compute node
growguest ${iciccmp} ${cmpspace}

# Add the host details to our local /etc/hosts
echo "${cmpip} ${iciccmp,,}.${DOMAIN} ${iciccmp,,}" >> /etc/hosts

# set RACF OPERATIONS on the compute guest
echo "Adding RACF attribute to ${iciccmp}..."
ldapmodify -Zx -h LDAPSRV.ibmpoc.internal -p 389 -D racfid={{ ocp_smapi_user }},profiletype=user,o=ibmzvm -w '{{ ocp_smapi_password }}' <<EOFLDIF
dn: racfid=${iciccmp},profiletype=user,o=ibmzvm
changetype: modify
add: racfattributes
racfattributes: OPERATIONS
-
EOFLDIF

# Management node is already set up; go ahead and boot the compute node
# Ansible will wait for it to be up and then run the auto'n to configure
echo "Adding SMAPI authorisation for the compute guest..."
smcli ala -T ${iciccmp} -f ALL -u ALL ${smapiauth}
sleep 1
echo "Issuing a SMAPI IPL for the compute guest..."
smcli ia -T ${iciccmp} ${smapiauth}
sleep 1
